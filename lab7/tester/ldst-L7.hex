@00000000
13 04 00 11 	// 0x00000000: addi s0, zero, pointer1
93 04 40 12 	// 0x00000004: addi s1, zero, pointer2
// Testing load
03 24 04 00 	// 0x00000008: lw s0, s0, 0	// x8 = array1
83 a4 04 00 	// 0x0000000c: lw s1, s1, 0	// x9 = array2
03 25 04 00 	// 0x00000010: lw a0, s0, 0	// x10 = 0x00010203
83 15 a4 00 	// 0x00000014: lh a1, s0, 10	// x11 = 0x00000A0B
03 16 64 00 	// 0x00000018: lh a2, s0, 6	// x12 = 0xFFFFF0F1
83 56 a4 00 	// 0x0000001c: lhu a3, s0, 10	// x13 = 0x00000A0B
83 07 b4 00 	// 0x00000020: lb a5, s0, 11	// x15 = 0x0000000A
83 48 b4 00 	// 0x00000024: lbu a7, s0, 11	// x17 = 0x0000000A
03 08 54 00 	// 0x00000028: lb a6, s0, 5	// x16 = 0xFFFFFFF2
03 49 54 00 	// 0x0000002c: lbu s2, s0, 5	// x18 = 0x000000F2
03 57 64 00 	// 0x00000030: lhu a4, s0, 6	// x14 = 0x0000F0F1
// Testing store
37 03 e0 ec 	// 0x00000034: lui t1, 0xECE00	// x6 = 0xECE003FA
13 03 a3 3f 	// 0x00000038: addi t1, t1, 0x3FA	// x6 = 0x000003FA
23 a4 64 00 	// 0x0000003c: sw s1, t1, 8
23 92 64 00 	// 0x00000040: sh s1, t1, 4
23 93 64 00 	// 0x00000044: sh s1, t1, 6
23 80 64 00 	// 0x00000048: sb s1, t1, 0
a3 80 64 00 	// 0x0000004c: sb s1, t1, 1
23 81 64 00 	// 0x00000050: sb s1, t1, 2
a3 81 64 00 	// 0x00000054: sb s1, t1, 3
83 a9 04 00 	// 0x00000058: lw s3, s1, 0	// x19 = 0xFAFAFAFA
03 aa 44 00 	// 0x0000005c: lw s4, s1, 4	// x20 = 0x03FA03FA
83 aa 84 00 	// 0x00000060: lw s5, s1, 8	// x21 = 0xECE003FA

// A simple for loop
13 0b 80 00 	// 0x00000064: addi s6, zero, 8	// x22 = 8, loop upper bound
93 0b 00 00 	// 0x00000068: addi s7, zero, 0	// x23 = 0, loop counter
93 84 04 01 	// 0x0000006c: addi s1, s1, 16
// loop1_start:
63 de 6b 01 	// 0x00000070: bge s7, s6, loop1_end
03 0c 04 00 	// 0x00000074: lb s8, s0, 0
23 80 84 01 	// 0x00000078: sb s1, s8, 0
13 04 14 00 	// 0x0000007c: addi s0, s0, 1
93 84 14 00 	// 0x00000080: addi s1, s1, 1
93 8b 1b 00 	// 0x00000084: addi s7, s7, 1
6f f0 9f fe 	// 0x00000088: jal zero, loop1_start
// loop1_end:
13 0b c0 ff 	// 0x0000008c: addi s6, zero, -4	// x22 = 4, loop upper bound
93 0b 80 ff 	// 0x00000090: addi s7, zero, -8	// x23 = 0, loop counter
// loop2_start:
63 8e 6b 01 	// 0x00000094: beq s7, s6, loop2_end
03 1c 04 00 	// 0x00000098: lh s8, s0, 0
23 90 84 01 	// 0x0000009c: sh s1, s8, 0
13 04 24 00 	// 0x000000a0: addi s0, s0, 2
93 84 24 00 	// 0x000000a4: addi s1, s1, 2
93 8b 1b 00 	// 0x000000a8: addi s7, s7, 1
6f f0 9f fe 	// 0x000000ac: jal zero, loop2_start
// loop2_end:
93 03 80 12 	// 0x000000b0: addi t2, zero, array2
93 83 03 01 	// 0x000000b4: addi t2, t2, 16
03 ae 03 00 	// 0x000000b8: lw t3, t2, 0	// x28 = 0x00010203
83 ae 43 00 	// 0x000000bc: lw t4, t2, 4	// x29 = 0xF0F1F2F3
03 af 84 ff 	// 0x000000c0: lw t5, s1, -8	// x30 = 0x0A0B0C0D
83 af c4 ff 	// 0x000000c4: lw t6, s1, -4	// x31 = 0xFAFBFCFD
23 19 f4 ff 	// 0x000000c8: sh s0, t6, -14
03 21 04 ff 	// 0x000000cc: lw sp, s0, -16	// x2 = 0xFCFD0203
// measure_end:
13 00 10 00 	// 0x000000d0: addi zero, zero, 1
13 00 00 00 	// 0x000000d4: nop 
13 00 00 00 	// 0x000000d8: nop 
13 00 00 00 	// 0x000000dc: nop 
13 00 00 00 	// 0x000000e0: nop 
13 00 00 00 	// 0x000000e4: nop 
13 00 00 00 	// 0x000000e8: nop 
13 00 00 00 	// 0x000000ec: nop 
13 00 00 00 	// 0x000000f0: nop 
13 00 00 00 	// 0x000000f4: nop 
13 00 00 00 	// 0x000000f8: nop 
13 00 00 00 	// 0x000000fc: nop 
13 00 00 00 	// 0x00000100: nop 
13 00 00 00 	// 0x00000104: nop 
13 00 00 00 	// 0x00000108: nop 
13 00 00 00 	// 0x0000010c: nop 

// pointer1:
// .dw array1
14 01 00 00 

// array1:
// .dw 0x00010203
03 02 01 00 
// .dw 0xF0F1F2F3
f3 f2 f1 f0 
// .dw 0x0A0B0C0D
0d 0c 0b 0a 
// .dw 0xFAFBFCFD
fd fc fb fa 

// pointer2:
// .dw array2
28 01 00 00 

// array2:
// .dw 0x00000000
00 00 00 00 
// .dw 0x00000000
00 00 00 00 
// .dw 0x00000000
00 00 00 00 
// .dw 0x00000000	//ECE003FA
00 00 00 00 
// .dw 0x00000000
00 00 00 00 
// .dw 0x00000000
00 00 00 00 
// .dw 0x00000000
00 00 00 00 
// .dw 0x00000000
00 00 00 00 

// Basic details
// .org	0x800
@00000800
// .dw 0x0	// Start of PC
00 00 00 00 
// .dw measure_end	// End of PC
d0 00 00 00 
// .dw 125	// Num Instruction
7d 00 00 00 
// .dw 80	// Minimum IPC * 128
50 00 00 00 

// Which register to check
// .db 0b00000101
// .db 0b11111100
// .db 0b00111111
// .db 0b11110000
05 fc 3f f0 

// Expected register values
// .org	0x820
@00000820
// .dw 0x00000000, 0x00000000, 0xFCFD0203, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
00 00 00 00 
00 00 00 00 
03 02 fd fc 
00 00 00 00 
00 00 00 00 
00 00 00 00 
00 00 00 00 
00 00 00 00 
// .dw 0x00000000, 0x00000000, 0x00010203, 0x00000A0B, 0xFFFFF0F1, 0x00000A0B, 0x0000F0F1, 0x0000000A
00 00 00 00 
00 00 00 00 
03 02 01 00 
0b 0a 00 00 
f1 f0 ff ff 
0b 0a 00 00 
f1 f0 00 00 
0a 00 00 00 
// .dw 0xFFFFFFF2, 0x0000000A, 0x000000F2, 0xFAFAFAFA, 0x03FA03FA, 0xECE003FA, 0x00000000, 0x00000000
f2 ff ff ff 
0a 00 00 00 
f2 00 00 00 
fa fa fa fa 
fa 03 fa 03 
fa 03 e0 ec 
00 00 00 00 
00 00 00 00 
// .dw 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00010203, 0xF0F1F2F3, 0x0A0B0C0D, 0xFAFBFCFD
00 00 00 00 
00 00 00 00 
00 00 00 00 
00 00 00 00 
03 02 01 00 
f3 f2 f1 f0 
0d 0c 0b 0a 
fd fc fb fa 
